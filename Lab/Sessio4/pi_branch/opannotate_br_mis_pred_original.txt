/* 
 * Command line: opannotate --source pi.g3 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: ARM Cortex-A9, speed 1998 MHz (estimated)
 * Counted BR_MIS_PRED events (Mispredicted or not predicted branch speculatively executed) with a unit mask of 0x00 (No unit mask) count 3000
 */
/* 
 * Total samples for file : "/home/analog/Laboratori/Sessio4/lab4_session/pi_branch/pi.c"
 * 
 *   7669 29.5166
 */


               :#include <memory.h>
               :#include <stdio.h>
               :#include <stdlib.h>
               :
               ://Definició de macros trambòliques de unrolling
               :#define UNROLL_SUB(_k)				\
               : 	if( (x[_k] = y[_k] - z[_k]) < 0 ){ \
               :    	x[_k] += 10;                 \
               :        z[_k-1]++;}                  \
               :			
               :#define UNROLL_DIV25(_k)		\
               :        r_new = DIV25r[x[_k]][r];       \
               :        x[_k] = DIV25x[x[_k]][r];	\
               :	r = r_new;
               :
               :#define UNROLL_DIV239(_k)		\
               :        r_new = DIV239r[x[_k]][r];      \
               :        x[_k] = DIV239x[x[_k]][r];	\
               :	r = r_new;
               :
               :#define UNROLL_DIV239x2(_k)		\
               :        r_new = DIV239r[x[_k]][r];      \
               :        x[_k] = DIV239x[x[_k]][r];	\
               :	r = r_new;						\
               :        r2_new = DIV239r[x[_k]][r2];      \
               :        x[_k] = DIV239x[x[_k]][r2];	\
               :	r2 = r2_new;
               :
               :#define UNROLL_LONGDIV_IF(_k)		\
               :            u = r * 10 + x[_k];		\
               :            q = u / n;                  \
               :            r = u - q * n;              \
               :            x[_k] = q;                    
               :
               :#define SUBTRACT_BETTER(_k)			\
               :  x[_k] = y[_k] - z[_k];			\
               :  mask = x[_k] >> 31;			\
               :  x[_k] += (10&mask);			\
               :  z[_k-1] -= mask;
               :        
               :int N, N4;
               :signed char a[25480], b[25480], c[25480];
               :signed char string[100];
               :
               :char DIV25x[10][25];
               :char DIV239x[10][239];
               :
               :unsigned DIV25r[10][25];
               :unsigned DIV239r[10][239];
               :
               :int unrollFactor = 12;
               :int unrollFactorD25 = 4;
               :int unrollFactorD239 = 4;
               :int unrollFactorD239x2 = 2;
               :
               :void memo(){
               :
               :    int i, j;
               :    unsigned q, r, u;
               :    
               :    for (i = 0; i < 10; i++){
               :      for (j = 0; j < 25; j++){
               :	u = j * 10 + i;                       
               :        q = u / 25;                               
               :        DIV25r[i][j] = u - q * 25;                           
               :        DIV25x[i][j] = q;  
               :      }
               :    }   
               :    
               :    for (i = 0; i < 10; i++){
               :      for (j = 0; j < 239; j++){
               :	u = j * 10 + i;                       
               :        q = u / 239;                               
               :        DIV239r[i][j] = u - q * 239;                           
               :        DIV239x[i][j] = q;  
               :      }
               :    }
               :}
               :
               :void DIVIDE25( signed char *x){
               :    int k;
               :    unsigned r, r_new;
               :
               :    r = 0;     
               :
     1  0.0038 :	for(k = 0; k <= N4-unrollFactorD25; k+=unrollFactorD25){
     1  0.0038 :		UNROLL_DIV25(k);
     7  0.0269 :		UNROLL_DIV25(k+1);
               :		UNROLL_DIV25(k+2);
     6  0.0231 :		UNROLL_DIV25(k+3);
               :	}
               :	for(; k <= N4; k++){
               :		UNROLL_DIV25(k);
               :	}
               :
               :}
               :
               :void DIVIDE239( signed char *x){
               :    int k;
               :    unsigned r, r_new;
               :
               :    r = 0;
               :
               :	for(k = 0; k <= N4-unrollFactorD239; k+=unrollFactorD239){
               :		UNROLL_DIV239(k);
               :		UNROLL_DIV239(k+1);
               :		UNROLL_DIV239(k+2);
               :		UNROLL_DIV239(k+3);
               :	}
               :	for(; k <= N4; k++){
               :		UNROLL_DIV239(k);
               :	}
               :}
               :
               :void DIVIDE239x2( signed char *x){
               :    int k;
               :    unsigned r, r_new, r2, r2_new;
               :
               :    r = 0;
               :	r2 = 0;
               :	
               :	for(k = 0; k <= N4-unrollFactorD239x2; k+=unrollFactorD239x2){
     9  0.0346 :		UNROLL_DIV239x2(k);
     1  0.0038 :		UNROLL_DIV239x2(k+1);
               :	}
               :	for(; k <= N4; k++){
     1  0.0038 :		UNROLL_DIV239x2(k);
               :	}
               :}
               :
               :void DIVIDE( signed char *x, int n )                           
               :{                                                
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
               :    r = 0;                                       
               :    for(k = 0; k <= N4; k++)                  
               :    {                                            
               :        u = r * 10 + x[k]; 
               :        q = u / n;                               
               :        r = u - q * n;                           
               :        x[k] = q;                                
               :    }                                           
               :}
               :
               :void LONGDIV( signed char *x, int n )                          
               :{                                                
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
     2  0.0077 :    if( n < 6553 )                               
               :    {                                            
               :        r = 0;                                   
  1067  4.1067 :        for( k = 0; k <= N4; k++ )               
               :        {     
  1083  4.1683 :            u = r * 10 + x[k];		
     1  0.0038 :            q = u / n;                  
               :            r = u - q * n;              
               :            x[k] = q;
               :		}
               :    }                                            
               :    else                                         
               :    {                                            
               :        r = 0;                                   
  2132  8.2057 :        for( k = 0; k <= N4; k++ )              
               :        {                                       
  1359  5.2305 :            if( r < 6553 )                      
               :            {                                   
   502  1.9321 :                u = r * 10 + x[k];              
   485  1.8667 :                q = u / n;                      
               :                r = u - q * n;                  
               :            }                                   
               :            else                                
               :            {                                   
   551  2.1207 :                v = (long) r * 10 + x[k];       
   385  1.4818 :                q = v / n;                      
               :                r = v - q * n;                  
               :            }                                   
    27  0.1039 :            x[k] = q;                           
               :        }                                       
               :    }                                           
               :}
               :
               :void MULTIPLY( signed char *x, int n )                        
               :{                                            
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    r = 0;                                   
               :    for( k = N4; k >= 0; k-- )               
               :    {                                        
               :        q = n * x[k] + r;                    
               :        r = q / 10;                          
               :        x[k] = q - r * 10;                   
               :    }                                        
               :}
               :
               :void SET( signed char *x, int n )                              
               :{                                                
               :    memset( x, 0, N4 + 1 );                      
     2  0.0077 :    x[0] = n;                                    
               :}
               :
               :
               :void SUBTRACT( signed char *x, signed char *y, signed char *z )                      
               :{                                                 /* SUBTRACT total:     40  0.1540 */
               :    int j, k, mask;
               :    unsigned q, r, u;
               :    long v;
               :    for( k = N4; k >= unrollFactor; k-= unrollFactor )                   
               :    {   
     2  0.0077 :		UNROLL_SUB(k);                                         
    19  0.0731 :		UNROLL_SUB(k-1);                                         
               :		UNROLL_SUB(k-2);                                         
     1  0.0038 :		UNROLL_SUB(k-3);                                         
               :		UNROLL_SUB(k-4);                                         
               :		UNROLL_SUB(k-5);                                         
               :		UNROLL_SUB(k-6);                                         
     1  0.0038 :		UNROLL_SUB(k-7);                                         
               :		UNROLL_SUB(k-8);                                         
               :		UNROLL_SUB(k-9);                                         
     2  0.0077 :		UNROLL_SUB(k-10);                                         
     3  0.0115 :		UNROLL_SUB(k-11);                                         
               :		//SUBTRACT_BETTER(k);
               :		//SUBTRACT_BETTER(k-1);
               :		//SUBTRACT_BETTER(k-2);
               :		//SUBTRACT_BETTER(k-3);
               :		//SUBTRACT_BETTER(k-4);
               :		//SUBTRACT_BETTER(k-5);
               :		//SUBTRACT_BETTER(k-6);
               :		//SUBTRACT_BETTER(k-7);
               :		//SUBTRACT_BETTER(k-8);
               :		//SUBTRACT_BETTER(k-9);
               :		//SUBTRACT_BETTER(k-10);
               :		//SUBTRACT_BETTER(k-11);
               :    }
               :
               :	k = N4%unrollFactor;
               :	for(; k >= 0; --k){
    12  0.0462 :		UNROLL_SUB(k);                                         
               :		//SUBTRACT_BETTER(k);
               :	}                                             
               :}
               :
               :
               :void calculate( void );
               :void progress( void );
               :void epilog( void );
               :
               :
               :int main( int argc, char *argv[] )
               :{
               :    N = 10000;
               :
               :    if( argc > 1 )
               :        N = atoi(argv[1]);
               :
               :    setbuf(stdout, NULL);
               :
               :	//Insertem operacions de memorització
               :	memo();
               :
               :    calculate();
               :
               :    epilog();
               :
               :    return 0;
               :}
               :
               :void calculate( void )
               :{
               :    int j;
               :
               :    N4 = N + 4; /* calculate total:   7629 29.3626 */
               :
               :    SET( a, 0 );
               :    SET( b, 0 );
               :
     5  0.0192 :    for( j = 2 * N4 + 1; j >= 3; j -= 2 )
               :    {
               :        SET( c, 1 );
               :        LONGDIV( c, j );
               :
               :        SUBTRACT( a, c, a );
               :        DIVIDE25(a);
               :
     2  0.0077 :        SUBTRACT( b, c, b );
               :       	//DIVIDE239(b);
               :        //DIVIDE239(b);
               :	   	DIVIDE239x2(b);
               :
               :        progress();
               :    }
               :
               :    SET( c, 1 );
               :
               :    SUBTRACT( a, c, a );
               :    DIVIDE( a, 5 );
               :
               :    SUBTRACT( b, c, b );
               :    DIVIDE239(b);
               :
               :    MULTIPLY( a, 4 );
               :    SUBTRACT( a, a, b );
               :    MULTIPLY( a, 4 );
               :
               :    progress();
               :}
               :
               :void progress( void )
               :{
               :    printf(".");
               :}
               :
               :void epilog( void )
               :{
               :    int j;
               :
               :    {
               :        fprintf( stdout, " \n3.");
               :        for( j = 1; j <= N; j++ )
               :        {
               :            fprintf( stdout, "%d", a[j]);
               :            if( j % 5  == 0 )
               :                if( j % 50 == 0 )
               :                    if( j % 250  == 0 )
               :                        fprintf( stdout, "    <%d>\n\n   ", j );
               :                    else
               :                        fprintf( stdout, "\n   " );
               :                else
               :                    fprintf( stdout, " " );
               :        }
               :    }
               :}
               :
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/fileops.c"
 * 
 *     60  0.2309
 */


 /* _IO_do_write@@GLIBC_2.4 total:      9  0.0346 */
 /* new_do_write total:     18  0.0693 */
 /* _IO_file_overflow@@GLIBC_2.4 total:     12  0.0462 */
 /* _IO_file_write@@GLIBC_2.4 total:     17  0.0654 */
 /* _IO_file_xsputn@@GLIBC_2.4 total:      4  0.0154 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/stdio-common/vfprintf.c"
 * 
 *     30  0.1155
 */


 /* vfprintf total:     18  0.0693 */
 /* buffered_vfprintf total:     12  0.0462 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/putchar.c"
 * 
 *     20  0.0770
 */


 /* putchar total:     22  0.0847 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/../ports/sysdeps/arm/memset.S"
 * 
 *      7  0.0269
 */


 /* memset total:      7  0.0269 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/strchrnul.c"
 * 
 *      6  0.0231
 */


 /* strchrnul total:      6  0.0231 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/io/../sysdeps/unix/syscall-template.S"
 * 
 *      5  0.0192
 */


 /* write total:      5  0.0192 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/stdio-common/_itoa.c"
 * 
 *      4  0.0154
 */


 /* _itoa_word total:      4  0.0154 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/libioP.h"
 * 
 *      3  0.0115
 */


/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/genops.c"
 * 
 *      3  0.0115
 */


 /* _IO_default_xsputn total:      3  0.0115 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/fputc.c"
 * 
 *      1  0.0038
 */


 /* fputc total:      1  0.0038 */
