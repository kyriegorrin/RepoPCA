/* 
 * Command line: opannotate --source pi.g3 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: ARM Cortex-A9, speed 1998 MHz (estimated)
 * Counted BR_PRED events (Predictable branch speculatively executed) with a unit mask of 0x00 (No unit mask) count 3000
 */
/* 
 * Total samples for file : "/home/analog/Laboratori/Sessio4/lab4_session/pi_branch/pi.c"
 * 
 * 116462 31.0388
 */


               :#include <memory.h>
               :#include <stdio.h>
               :#include <stdlib.h>
               :
               ://Definició de macros trambòliques de unrolling
               :#define UNROLL_SUB(_k)				\
               : 	if( (x[_k] = y[_k] - z[_k]) < 0 ){ \
               :    	x[_k] += 10;                 \
               :        z[_k-1]++;}                  \
               :			
               :#define UNROLL_DIV25(_k)		\
               :        r_new = DIV25r[x[_k]][r];       \
               :        x[_k] = DIV25x[x[_k]][r];	\
               :	r = r_new;
               :
               :#define UNROLL_DIV239(_k)		\
               :        r_new = DIV239r[x[_k]][r];      \
               :        x[_k] = DIV239x[x[_k]][r];	\
               :	r = r_new;
               :
               :#define UNROLL_DIV239x2(_k)		\
               :        r_new = DIV239r[x[_k]][r];      \
               :        x[_k] = DIV239x[x[_k]][r];	\
               :	r = r_new;						\
               :        r2_new = DIV239r[x[_k]][r2];      \
               :        x[_k] = DIV239x[x[_k]][r2];	\
               :	r2 = r2_new;
               :
               :#define UNROLL_LONGDIV_IF(_k)		\
               :            u = r * 10 + x[_k];		\
               :            q = u / n;                  \
               :            r = u - q * n;              \
               :            x[_k] = q;                    
               :
               :#define SUBTRACT_BETTER(_k)			\
               :  x[_k] = y[_k] - z[_k];			\
               :  mask = x[_k] >> 31;			\
               :  x[_k] += (10&mask);			\
               :  z[_k-1] -= mask;
               :        
               :int N, N4;
               :signed char a[25480], b[25480], c[25480];
               :signed char string[100];
               :
               :char DIV25x[10][25];
               :char DIV239x[10][239];
               :
               :unsigned DIV25r[10][25];
               :unsigned DIV239r[10][239];
               :
               :int unrollFactor = 12;
               :int unrollFactorD25 = 4;
               :int unrollFactorD239 = 4;
               :int unrollFactorD239x2 = 2;
               :
               :void memo(){ /* memo total:      2 5.3e-04 */
               :
               :    int i, j;
               :    unsigned q, r, u;
               :    
               :    for (i = 0; i < 10; i++){
               :      for (j = 0; j < 25; j++){
               :	u = j * 10 + i;                       
               :        q = u / 25;                               
               :        DIV25r[i][j] = u - q * 25;                           
               :        DIV25x[i][j] = q;  
               :      }
               :    }   
               :    
               :    for (i = 0; i < 10; i++){
               :      for (j = 0; j < 239; j++){
               :	u = j * 10 + i;                       
     2 5.3e-04 :        q = u / 239;                               
               :        DIV239r[i][j] = u - q * 239;                           
               :        DIV239x[i][j] = q;  
               :      }
               :    }
               :}
               :
               :void DIVIDE25( signed char *x){
               :    int k;
               :    unsigned r, r_new;
               :
     2 5.3e-04 :    r = 0;     
               :
     4  0.0011 :	for(k = 0; k <= N4-unrollFactorD25; k+=unrollFactorD25){
     3 8.0e-04 :		UNROLL_DIV25(k);
   207  0.0552 :		UNROLL_DIV25(k+1);
  9726  2.5921 :		UNROLL_DIV25(k+2);
    19  0.0051 :		UNROLL_DIV25(k+3);
               :	}
               :	for(; k <= N4; k++){
               :		UNROLL_DIV25(k);
               :	}
               :
               :}
               :
               :void DIVIDE239( signed char *x){
               :    int k;
               :    unsigned r, r_new;
               :
               :    r = 0;
               :
               :	for(k = 0; k <= N4-unrollFactorD239; k+=unrollFactorD239){
               :		UNROLL_DIV239(k);
               :		UNROLL_DIV239(k+1);
     1 2.7e-04 :		UNROLL_DIV239(k+2);
               :		UNROLL_DIV239(k+3);
               :	}
               :	for(; k <= N4; k++){
               :		UNROLL_DIV239(k);
               :	}
               :}
               :
               :void DIVIDE239x2( signed char *x){
               :    int k;
               :    unsigned r, r_new, r2, r2_new;
               :
     3 8.0e-04 :    r = 0;
     1 2.7e-04 :	r2 = 0;
               :	
  4721  1.2582 :	for(k = 0; k <= N4-unrollFactorD239x2; k+=unrollFactorD239x2){
   401  0.1069 :		UNROLL_DIV239x2(k);
 14779  3.9388 :		UNROLL_DIV239x2(k+1);
               :	}
               :	for(; k <= N4; k++){
     4  0.0011 :		UNROLL_DIV239x2(k);
               :	}
               :}
               :
               :void DIVIDE( signed char *x, int n )                           
               :{                                                
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
               :    r = 0;                                       
     1 2.7e-04 :    for(k = 0; k <= N4; k++)                  
               :    {                                            
               :        u = r * 10 + x[k]; 
     3 8.0e-04 :        q = u / n;                               
               :        r = u - q * n;                           
               :        x[k] = q;                                
               :    }                                           
               :}
               :
               :void LONGDIV( signed char *x, int n )                          
               :{                                                
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
     4  0.0011 :    if( n < 6553 )                               
               :    {                                            
               :        r = 0;                                   
 12260  3.2675 :        for( k = 0; k <= N4; k++ )               
               :        {     
  4737  1.2625 :            u = r * 10 + x[k];		
  3236  0.8624 :            q = u / n;                  
    28  0.0075 :            r = u - q * n;              
   945  0.2519 :            x[k] = q;
               :		}
               :    }                                            
               :    else                                         
               :    {                                            
               :        r = 0;                                   
 13822  3.6838 :        for( k = 0; k <= N4; k++ )              
               :        {                                       
 21512  5.7333 :            if( r < 6553 )                      
               :            {                                   
  4120  1.0980 :                u = r * 10 + x[k];              
  2712  0.7228 :                q = u / n;                      
  1089  0.2902 :                r = u - q * n;                  
               :            }                                   
               :            else                                
               :            {                                   
  6017  1.6036 :                v = (long) r * 10 + x[k];       
  8011  2.1350 :                q = v / n;                      
               :                r = v - q * n;                  
               :            }                                   
  1309  0.3489 :            x[k] = q;                           
               :        }                                       
               :    }                                           
               :}
               :
               :void MULTIPLY( signed char *x, int n )                        
               :{                                            
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    r = 0;                                   
     8  0.0021 :    for( k = N4; k >= 0; k-- )               
               :    {                                        
               :        q = n * x[k] + r;                    
               :        r = q / 10;                          
               :        x[k] = q - r * 10;                   
               :    }                                        
               :}
               :
               :void SET( signed char *x, int n )                              
               :{                                                
               :    memset( x, 0, N4 + 1 );                      
     1 2.7e-04 :    x[0] = n;                                    
               :}
               :
               :
               :void SUBTRACT( signed char *x, signed char *y, signed char *z )                      
     4  0.0011 :{                                                 /* SUBTRACT total:   6730  1.7936 */
               :    int j, k, mask;
               :    unsigned q, r, u;
               :    long v;
     5  0.0013 :    for( k = N4; k >= unrollFactor; k-= unrollFactor )                   
               :    {   
               :		//UNROLL_SUB(k);                                         
               :		//UNROLL_SUB(k-1);                                         
               :		//UNROLL_SUB(k-2);                                         
               :		//UNROLL_SUB(k-3);                                         
               :		//UNROLL_SUB(k-4);                                         
               :		//UNROLL_SUB(k-5);                                         
               :		//UNROLL_SUB(k-6);                                         
               :		//UNROLL_SUB(k-7);                                         
               :		//UNROLL_SUB(k-8);                                         
               :		//UNROLL_SUB(k-9);                                         
               :		//UNROLL_SUB(k-10);                                         
               :		//UNROLL_SUB(k-11);                                         
    23  0.0061 :		SUBTRACT_BETTER(k);
   730  0.1946 :		SUBTRACT_BETTER(k-1);
  5859  1.5615 :		SUBTRACT_BETTER(k-2);
     3 8.0e-04 :		SUBTRACT_BETTER(k-3);
               :		SUBTRACT_BETTER(k-4);
     2 5.3e-04 :		SUBTRACT_BETTER(k-5);
     3 8.0e-04 :		SUBTRACT_BETTER(k-6);
     1 2.7e-04 :		SUBTRACT_BETTER(k-7);
     3 8.0e-04 :		SUBTRACT_BETTER(k-8);
     1 2.7e-04 :		SUBTRACT_BETTER(k-9);
     3 8.0e-04 :		SUBTRACT_BETTER(k-10);
     3 8.0e-04 :		SUBTRACT_BETTER(k-11);
               :    }
               :
               :	k = N4%unrollFactor;
     2 5.3e-04 :	for(; k >= 0; --k){
               :		//UNROLL_SUB(k);                                         
    78  0.0208 :		SUBTRACT_BETTER(k);
               :	}                                             
    10  0.0027 :}
               :
               :
               :void calculate( void );
               :void progress( void );
               :void epilog( void );
               :
               :
               :int main( int argc, char *argv[] )
               :{
               :    N = 10000;
               :
               :    if( argc > 1 )
               :        N = atoi(argv[1]);
               :
               :    setbuf(stdout, NULL);
               :
               :	//Insertem operacions de memorització
               :	memo();
               :
               :    calculate();
               :
               :    epilog();
               :
               :    return 0;
               :}
               :
               :void calculate( void )
               :{
               :    int j;
               :
               :    N4 = N + 4; /* calculate total: 109716 29.2409 */
               :
               :    SET( a, 0 );
               :    SET( b, 0 );
               :
     7  0.0019 :    for( j = 2 * N4 + 1; j >= 3; j -= 2 )
               :    {
               :        SET( c, 1 );
               :        LONGDIV( c, j );
               :
     7  0.0019 :        SUBTRACT( a, c, a );
               :        DIVIDE25(a);
               :
     8  0.0021 :        SUBTRACT( b, c, b );
               :       	//DIVIDE239(b);
               :        //DIVIDE239(b);
               :	   	DIVIDE239x2(b);
               :
               :        progress();
               :    }
               :
               :    SET( c, 1 );
               :
               :    SUBTRACT( a, c, a );
               :    DIVIDE( a, 5 );
               :
               :    SUBTRACT( b, c, b );
               :    DIVIDE239(b);
               :
               :    MULTIPLY( a, 4 );
               :    SUBTRACT( a, a, b );
               :    MULTIPLY( a, 4 );
               :
               :    progress();
               :}
               :
               :void progress( void )
               :{
               :    printf(".");
               :}
               :
               :void epilog( void )
               :{ /* epilog total:     22  0.0059 */
               :    int j;
               :
               :    {
               :        fprintf( stdout, " \n3.");
     3 8.0e-04 :        for( j = 1; j <= N; j++ )
               :        {
               :            fprintf( stdout, "%d", a[j]);
     9  0.0024 :            if( j % 5  == 0 )
     9  0.0024 :                if( j % 50 == 0 )
     1 2.7e-04 :                    if( j % 250  == 0 )
               :                        fprintf( stdout, "    <%d>\n\n   ", j );
               :                    else
               :                        fprintf( stdout, "\n   " );
               :                else
               :                    fprintf( stdout, " " );
               :        }
               :    }
               :}
               :
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/../ports/sysdeps/arm/memset.S"
 * 
 *   1263  0.3366
 */


 /* memset total:   1263  0.3366 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/stdio-common/vfprintf.c"
 * 
 *    258  0.0688
 */


 /* vfprintf total:    196  0.0522 */
 /* buffered_vfprintf total:     64  0.0171 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/fileops.c"
 * 
 *    245  0.0653
 */


 /* _IO_do_write@@GLIBC_2.4 total:     17  0.0045 */
 /* new_do_write total:     83  0.0221 */
 /* _IO_file_overflow@@GLIBC_2.4 total:     61  0.0163 */
 /* _IO_file_write@@GLIBC_2.4 total:     52  0.0139 */
 /* _IO_file_xsputn@@GLIBC_2.4 total:     32  0.0085 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/genops.c"
 * 
 *     74  0.0197
 */


 /* __overflow total:      3 8.0e-04 */
 /* _IO_default_xsputn total:     71  0.0189 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/io/../sysdeps/unix/syscall-template.S"
 * 
 *     56  0.0149
 */


 /* write total:     56  0.0149 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/putchar.c"
 * 
 *     41  0.0109
 */


 /* putchar total:     55  0.0147 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/strchrnul.c"
 * 
 *     30  0.0080
 */


 /* strchrnul total:     30  0.0080 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/debug/fprintf_chk.c"
 * 
 *     29  0.0077
 */


 /* __fprintf_chk total:     47  0.0125 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/stdio-common/_itoa.c"
 * 
 *     22  0.0059
 */


 /* _itoa_word total:     22  0.0059 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/debug/../libio/libioP.h"
 * 
 *     18  0.0048
 */


/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/libioP.h"
 * 
 *     14  0.0037
 */


/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/debug/memset_chk.c"
 * 
 *      8  0.0021
 */


 /* __memset_chk total:      8  0.0021 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/libio/fputc.c"
 * 
 *      7  0.0019
 */


 /* fputc total:      7  0.0019 */
/* 
 * Total samples for file : "/usr/include/arm-linux-gnueabihf/bits/string3.h"
 * 
 *      6  0.0016
 */


               :/* Copyright (C) 2004-2014 Free Software Foundation, Inc.
               :   This file is part of the GNU C Library.
               :
               :   The GNU C Library is free software; you can redistribute it and/or
               :   modify it under the terms of the GNU Lesser General Public
               :   License as published by the Free Software Foundation; either
               :   version 2.1 of the License, or (at your option) any later version.
               :
               :   The GNU C Library is distributed in the hope that it will be useful,
               :   but WITHOUT ANY WARRANTY; without even the implied warranty of
               :   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               :   Lesser General Public License for more details.
               :
               :   You should have received a copy of the GNU Lesser General Public
               :   License along with the GNU C Library; if not, see
               :   <http://www.gnu.org/licenses/>.  */
               :
               :#ifndef _STRING_H
               :# error "Never use <bits/string3.h> directly; include <string.h> instead."
               :#endif
               :
               :__warndecl (__warn_memset_zero_len,
               :	    "memset used with constant zero length parameter; this could be due to transposed parameters");
               :
               :#ifndef __cplusplus
               :/* XXX This is temporarily.  We should not redefine any of the symbols
               :   and instead integrate the error checking into the original
               :   definitions.  */
               :# undef memcpy
               :# undef memmove
               :# undef memset
               :# undef strcat
               :# undef strcpy
               :# undef strncat
               :# undef strncpy
               :# ifdef __USE_GNU
               :#  undef mempcpy
               :#  undef stpcpy
               :# endif
               :# ifdef __USE_BSD
               :#  undef bcopy
               :#  undef bzero
               :# endif
               :#endif
               :
               :
               :__fortify_function void *
               :__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
               :	       size_t __len))
               :{
               :  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void *
               :__NTH (memmove (void *__dest, const void *__src, size_t __len))
               :{
               :  return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function void *
               :__NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :#endif
               :
               :
               :/* The first two tests here help to catch a somewhat common problem
               :   where the second and third parameter are transposed.  This is
               :   especially problematic if the intended fill value is zero.  In this
               :   case no work is done at all.  We detect these problems by referring
               :   non-existing functions.  */
               :__fortify_function void *
               :__NTH (memset (void *__dest, int __ch, size_t __len))
               :{
               :  if (__builtin_constant_p (__len) && __len == 0
               :      && (!__builtin_constant_p (__ch) || __ch != 0))
               :    {
               :      __warn_memset_zero_len ();
               :      return __dest;
               :    }
     6  0.0016 :  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_BSD
               :__fortify_function void
               :__NTH (bcopy (const void *__src, void *__dest, size_t __len))
               :{
               :  (void) __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void
               :__NTH (bzero (void *__dest, size_t __len))
               :{
               :  (void) __builtin___memset_chk (__dest, '\0', __len, __bos0 (__dest));
               :}
               :#endif
               :
               :__fortify_function char *
               :__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function char *
               :__NTH (stpcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___stpcpy_chk (__dest, __src, __bos (__dest));
               :}
               :#endif
               :
               :
               :__fortify_function char *
               :__NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
               :}
               :
               :// XXX We have no corresponding builtin yet.
               :extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
               :			    size_t __destlen) __THROW;
               :extern char *__REDIRECT_NTH (__stpncpy_alias, (char *__dest, const char *__src,
               :					       size_t __n), stpncpy);
               :
               :__fortify_function char *
               :__NTH (stpncpy (char *__dest, const char *__src, size_t __n))
               :{
               :  if (__bos (__dest) != (size_t) -1
               :      && (!__builtin_constant_p (__n) || __n <= __bos (__dest)))
               :    return __stpncpy_chk (__dest, __src, __n, __bos (__dest));
               :  return __stpncpy_alias (__dest, __src, __n);
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strcat (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcat_chk (__dest, __src, __bos (__dest));
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strncat (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
               :}
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/elf/dl-lookup.c"
 * 
 *      3 8.0e-04
 */


 /* do_lookup_x total:      1 2.7e-04 */
 /* _dl_lookup_symbol_x total:      2 5.3e-04 */
/* 
 * Total samples for file : "/usr/include/arm-linux-gnueabihf/bits/stdio2.h"
 * 
 *      2 5.3e-04
 */


               :/* Checking macros for stdio functions.
               :   Copyright (C) 2004-2014 Free Software Foundation, Inc.
               :   This file is part of the GNU C Library.
               :
               :   The GNU C Library is free software; you can redistribute it and/or
               :   modify it under the terms of the GNU Lesser General Public
               :   License as published by the Free Software Foundation; either
               :   version 2.1 of the License, or (at your option) any later version.
               :
               :   The GNU C Library is distributed in the hope that it will be useful,
               :   but WITHOUT ANY WARRANTY; without even the implied warranty of
               :   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               :   Lesser General Public License for more details.
               :
               :   You should have received a copy of the GNU Lesser General Public
               :   License along with the GNU C Library; if not, see
               :   <http://www.gnu.org/licenses/>.  */
               :
               :#ifndef _STDIO_H
               :# error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
               :#endif
               :
               :extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
               :			  const char *__restrict __format, ...) __THROW;
               :extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
               :			   const char *__restrict __format,
               :			   _G_va_list __ap) __THROW;
               :
               :#ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
               :{
               :  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
               :				  __bos (__s), __fmt, __va_arg_pack ());
               :}
               :#elif !defined __cplusplus
               :# define sprintf(str, ...) \
               :  __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
               :			   __VA_ARGS__)
               :#endif
               :
               :__fortify_function int
               :__NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
               :		 _G_va_list __ap))
               :{
               :  return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
               :				   __bos (__s), __fmt, __ap);
               :}
               :
               :#if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
               :
               :extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
               :			   size_t __slen, const char *__restrict __format,
               :			   ...) __THROW;
               :extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
               :			    size_t __slen, const char *__restrict __format,
               :			    _G_va_list __ap) __THROW;
               :
               :# ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (snprintf (char *__restrict __s, size_t __n,
               :		 const char *__restrict __fmt, ...))
               :{
               :  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
               :				   __bos (__s), __fmt, __va_arg_pack ());
               :}
               :# elif !defined __cplusplus
               :#  define snprintf(str, len, ...) \
               :  __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
               :			    __VA_ARGS__)
               :# endif
               :
               :__fortify_function int
               :__NTH (vsnprintf (char *__restrict __s, size_t __n,
               :		  const char *__restrict __fmt, _G_va_list __ap))
               :{
               :  return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
               :				    __bos (__s), __fmt, __ap);
               :}
               :
               :#endif
               :
               :#if __USE_FORTIFY_LEVEL > 1
               :
               :extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
               :			  const char *__restrict __format, ...);
               :extern int __printf_chk (int __flag, const char *__restrict __format, ...);
               :extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
               :			   const char *__restrict __format, _G_va_list __ap);
               :extern int __vprintf_chk (int __flag, const char *__restrict __format,
               :			  _G_va_list __ap);
               :
               :# ifdef __va_arg_pack
               :__fortify_function int
               :fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
               :{
               :  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			__va_arg_pack ());
               :}
               :
               :__fortify_function int
               :printf (const char *__restrict __fmt, ...)
               :{
     2 5.3e-04 :  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
               :}
               :# elif !defined __cplusplus
               :#  define printf(...) \
               :  __printf_chk (__USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  define fprintf(stream, ...) \
               :  __fprintf_chk (stream, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :# endif
               :
               :__fortify_function int
               :vprintf (const char *__restrict __fmt, _G_va_list __ap)
               :{
               :#ifdef __USE_EXTERN_INLINES
               :  return __vfprintf_chk (stdout, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :#else
               :  return __vprintf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :#endif
               :}
               :
               :__fortify_function int
               :vfprintf (FILE *__restrict __stream,
               :	  const char *__restrict __fmt, _G_va_list __ap)
               :{
               :  return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :
               :# ifdef __USE_XOPEN2K8
               :extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
               :			  ...) __attribute__ ((__format__ (__printf__, 3, 4)));
               :extern int __vdprintf_chk (int __fd, int __flag,
               :			   const char *__restrict __fmt, _G_va_list __arg)
               :     __attribute__ ((__format__ (__printf__, 3, 0)));
               :
               :#  ifdef __va_arg_pack
               :__fortify_function int
               :dprintf (int __fd, const char *__restrict __fmt, ...)
               :{
               :  return __dprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			__va_arg_pack ());
               :}
               :#  elif !defined __cplusplus
               :#   define dprintf(fd, ...) \
               :  __dprintf_chk (fd, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  endif
               :
               :__fortify_function int
               :vdprintf (int __fd, const char *__restrict __fmt, _G_va_list __ap)
               :{
               :  return __vdprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :# endif
               :
               :# ifdef __USE_GNU
               :
               :extern int __asprintf_chk (char **__restrict __ptr, int __flag,
               :			   const char *__restrict __fmt, ...)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 4))) __wur;
               :extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
               :			    const char *__restrict __fmt, _G_va_list __arg)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 0))) __wur;
               :extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
               :				 int __flag, const char *__restrict __format,
               :				 ...)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 4)));
               :extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
               :				  int __flag,
               :				  const char *__restrict __format,
               :				  _G_va_list __args)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 0)));
               :
               :#  ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...))
               :{
               :  return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			 __va_arg_pack ());
               :}
               :
               :__fortify_function int
               :__NTH (__asprintf (char **__restrict __ptr, const char *__restrict __fmt,
               :		   ...))
               :{
               :  return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			 __va_arg_pack ());
               :}
               :
               :__fortify_function int
               :__NTH (obstack_printf (struct obstack *__restrict __obstack,
               :		       const char *__restrict __fmt, ...))
               :{
               :  return __obstack_printf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			       __va_arg_pack ());
               :}
               :#  elif !defined __cplusplus
               :#   define asprintf(ptr, ...) \
               :  __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#   define __asprintf(ptr, ...) \
               :  __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#   define obstack_printf(obstack, ...) \
               :  __obstack_printf_chk (obstack, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  endif
               :
               :__fortify_function int
               :__NTH (vasprintf (char **__restrict __ptr, const char *__restrict __fmt,
               :		  _G_va_list __ap))
               :{
               :  return __vasprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :
               :__fortify_function int
               :__NTH (obstack_vprintf (struct obstack *__restrict __obstack,
               :			const char *__restrict __fmt, _G_va_list __ap))
               :{
               :  return __obstack_vprintf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
               :				__ap);
               :}
               :
               :# endif
               :
               :#endif
               :
               :#if !defined __USE_ISOC11 \
               :    || (defined __cplusplus && __cplusplus <= 201103L && !defined __USE_GNU)
               :extern char *__gets_chk (char *__str, size_t) __wur;
               :extern char *__REDIRECT (__gets_warn, (char *__str), gets)
               :     __wur __warnattr ("please use fgets or getline instead, gets can't "
               :		       "specify buffer size");
               :
               :__fortify_function __wur char *
               :gets (char *__str)
               :{
               :  if (__bos (__str) != (size_t) -1)
               :    return __gets_chk (__str, __bos (__str));
               :  return __gets_warn (__str);
               :}
               :#endif
               :
               :extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream) __wur;
               :extern char *__REDIRECT (__fgets_alias,
               :			 (char *__restrict __s, int __n,
               :			  FILE *__restrict __stream), fgets) __wur;
               :extern char *__REDIRECT (__fgets_chk_warn,
               :			 (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream), __fgets_chk)
               :     __wur __warnattr ("fgets called with bigger size than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur char *
               :fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
               :{
               :  if (__bos (__s) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__n) || __n <= 0)
               :	return __fgets_chk (__s, __bos (__s), __n, __stream);
               :
               :      if ((size_t) __n > __bos (__s))
               :	return __fgets_chk_warn (__s, __bos (__s), __n, __stream);
               :    }
               :  return __fgets_alias (__s, __n, __stream);
               :}
               :
               :extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream) __wur;
               :extern size_t __REDIRECT (__fread_alias,
               :			  (void *__restrict __ptr, size_t __size,
               :			   size_t __n, FILE *__restrict __stream),
               :			  fread) __wur;
               :extern size_t __REDIRECT (__fread_chk_warn,
               :			  (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream),
               :			  __fread_chk)
               :     __wur __warnattr ("fread called with bigger size * nmemb than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur size_t
               :fread (void *__restrict __ptr, size_t __size, size_t __n,
               :       FILE *__restrict __stream)
               :{
               :  if (__bos0 (__ptr) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__size)
               :	  || !__builtin_constant_p (__n)
               :	  || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
               :	return __fread_chk (__ptr, __bos0 (__ptr), __size, __n, __stream);
               :
               :      if (__size * __n > __bos0 (__ptr))
               :	return __fread_chk_warn (__ptr, __bos0 (__ptr), __size, __n, __stream);
               :    }
               :  return __fread_alias (__ptr, __size, __n, __stream);
               :}
               :
               :#ifdef __USE_GNU
               :extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
               :				   int __n, FILE *__restrict __stream) __wur;
               :extern char *__REDIRECT (__fgets_unlocked_alias,
               :			 (char *__restrict __s, int __n,
               :			  FILE *__restrict __stream), fgets_unlocked) __wur;
               :extern char *__REDIRECT (__fgets_unlocked_chk_warn,
               :			 (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream), __fgets_unlocked_chk)
               :     __wur __warnattr ("fgets_unlocked called with bigger size than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur char *
               :fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
               :{
               :  if (__bos (__s) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__n) || __n <= 0)
               :	return __fgets_unlocked_chk (__s, __bos (__s), __n, __stream);
               :
               :      if ((size_t) __n > __bos (__s))
               :	return __fgets_unlocked_chk_warn (__s, __bos (__s), __n, __stream);
               :    }
               :  return __fgets_unlocked_alias (__s, __n, __stream);
               :}
               :#endif
               :
               :#ifdef __USE_MISC
               :# undef fread_unlocked
               :extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
               :				    size_t __size, size_t __n,
               :				    FILE *__restrict __stream) __wur;
               :extern size_t __REDIRECT (__fread_unlocked_alias,
               :			  (void *__restrict __ptr, size_t __size,
               :			   size_t __n, FILE *__restrict __stream),
               :			  fread_unlocked) __wur;
               :extern size_t __REDIRECT (__fread_unlocked_chk_warn,
               :			  (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream),
               :			  __fread_unlocked_chk)
               :     __wur __warnattr ("fread_unlocked called with bigger size * nmemb than "
               :		       "length of destination buffer");
               :
               :__fortify_function __wur size_t
               :fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
               :		FILE *__restrict __stream)
               :{
               :  if (__bos0 (__ptr) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__size)
               :	  || !__builtin_constant_p (__n)
               :	  || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
               :	return __fread_unlocked_chk (__ptr, __bos0 (__ptr), __size, __n,
               :				     __stream);
               :
               :      if (__size * __n > __bos0 (__ptr))
               :	return __fread_unlocked_chk_warn (__ptr, __bos0 (__ptr), __size, __n,
               :					  __stream);
               :    }
               :
               :# ifdef __USE_EXTERN_INLINES
               :  if (__builtin_constant_p (__size)
               :      && __builtin_constant_p (__n)
               :      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
               :      && __size * __n <= 8)
               :    {
               :      size_t __cnt = __size * __n;
               :      char *__cptr = (char *) __ptr;
               :      if (__cnt == 0)
               :	return 0;
               :
               :      for (; __cnt > 0; --__cnt)
               :	{
               :	  int __c = _IO_getc_unlocked (__stream);
               :	  if (__c == EOF)
               :	    break;
               :	  *__cptr++ = __c;
               :	}
               :      return (__cptr - (char *) __ptr) / __size;
               :    }
               :# endif
               :  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
               :}
               :#endif
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/stdio-common/printf-parse.h"
 * 
 *      2 5.3e-04
 */


/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/strcmp.c"
 * 
 *      1 2.7e-04
 */


 /* strcmp total:      1 2.7e-04 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/../ports/sysdeps/arm/armv6t2/strlen.S"
 * 
 *      1 2.7e-04
 */


 /* strlen total:      1 2.7e-04 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/string/../ports/sysdeps/arm/armv6/strchr.S"
 * 
 *      1 2.7e-04
 */


 /* index total:      1 2.7e-04 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/elf/dl-object.c"
 * 
 *      1 2.7e-04
 */


 /* _dl_new_object total:      1 2.7e-04 */
/* 
 * Total samples for file : "/build/buildd/eglibc-2.19/elf/../ports/sysdeps/arm/dl-machine.h"
 * 
 *      1 2.7e-04
 */


