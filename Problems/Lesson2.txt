LESSON 2.1
----------

//TODO, I think we haven't started the lectures for this.
1)lmao


LESSON 2.2
----------

10) This is obvious because we are passing our "n" as an unsigned data type, which can not
hold negative values. The for has the condition "i <= n - 1", so when "n" is initialized with
a 0, the "n-1" does not equal to -1, it actually goes all the way around to the maximum positive value.
That totally misrepresents the actual number of elements of the two vectors, trying to access the total
range of representable positions by that "n". That provokes the segmentation fault.

Least intrusive fix (changing the condition): 

float dot_product(float *a, float *b, unsigned n){
	int i;
	float result = 0.0;
	for(i = 0; i < n; ++i) result += a[i]*b[i];
	return result;
}

11) /*We're assuming that we can do the adding operation. If we have to know the result without actually
doing the operation beforehand, we have to change this solution.*/

To know (or more precisely, check) if there is overflow, we just have to see if the output of the
adding operation is lower than one of its inputs. 

C Code:

bool overflowSafe(unsigned a, unsigned b){
	int c = a + b;
	return !(c < a || c < b);
}

12) A non-analytic approach would be to take advantage of the C language data types and compare two
outputs of the same operation, but one computed with integers and the other with "long" inputs.
When comparing "int" with "long" data types, the "int" is implicitly casted to "long". If there was no overflow,
both values should be equal.

The solution proposed wouldn't work because most of the time you just would overflow backwards to the original
value, masking the actual overflow. And that's not even factoring in the fact that overflows with signed
integers in C have undefined behavior. It's just not a reliable solution.

C code (checking after possibly compromised computation):

bool overflowSafe(int a, int b){
	int c;
	long cAux;
	c = a + b;
	cAux = (long) a + (long) b; //We cast the original values to long
	return c == cAux;
}

If we want to check if it would overflow without implicitly doing the controversial adding operation  
(because signed integer overflow can produce undefined behavior that we want to avoid), we can take a totally
different approach. C gives us a library containing macros that give us the minimum and maximum values
for each data type in our machine. Knowing that, we can use those macros to determine if there will be
overflow or not. I'll present two approaches, as I am inside a train with no internet connection
and my personal meme folder has limited entertaining capabilities.

Approach 1 (doing the operation on a larger type of variable like "long" and comparing it to
the maximum and minimum values, we never produce an overflow):

#include <limits.h>

bool overflowSafe(int a, int b){
	long cAux = (long) a + (long) b; We get a value that we know is perfectly representable.
	return !(cAux < INT_MIN || cAux > INT_MAX);
}

Approach 2 (still using macros, but we don't really compute the value):

#include <limits.h>

bool overflowSafe(int a, int b){
	//We check if there's overflow or underflow
	return !(((a > 0) && (a > INT_MAX - b)) || ((a < 0) && (a < INT_MIN - b)));
}	

WARNING: This last approach may not be robust. Operating with INT_MAX or INT_MIN could cause problems.
You should stick with Approach 1. 

13) 
a: 

14) 
